Given weights and values of n items,
put these items in a knapsack of capacity W to get the maximum total value in the knapsack. 
In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent values and weights associated with n items respectively.
Also given an integer W which represents knapsack capacity, 
find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W.
You cannot break an item, either pick the complete item or donâ€™t pick it (0-1 property).



Input:
   Wt -{10,20,30}---------->n=3  n==0 maxprofit=0
   Val-{60,100,120}--------> n=3
   W=50
   
   if(n==0)  // if no weight array or valur array is there there will be no profit
   if(W==0)) //if Capcity of bag is zero then we can't add any items to it and profit will be 0.
   
   so 
     if(n==0 || W==0)
         return 0;
         
         
   let start picking elment from n;
   so there will be two condtion either we will pick or not.
    We can only pick if Weight of current element is less than or equal to W.

    In Bounded Knapsack We can't pick an element twice.
    
   if(Wt[n-1]<=W)
   return Math.max(Val[n-1]+Knapsack(n-1,W-Wt[n-1]),Knapsack(n-1,W);
   else
       returnn Knapsack(n-1,W)
       
       10 20 30
       60 100 120
                  
                   
                                                      (3,50) -->max(120+(2,20),(2,50))--->220 
                                                                    120+100,160
                   (2,20)-->max(100+(1,0),(1,20)                                         (2,50)-->max(100+(1,30),(1,50))
                                100+0,60                                                    100+60,60
    (1,0)-->return 0 since W=0     (1,20)-->max(60+(0,10),(0,20))           (1,30)-->max(60+(0,20),(0,30)        (1,50)-->max(60+(0,40),(0,50)
                                                 60+0,0                              60+0,0                                 60+0,0
                              (0,10)-->return 0  (0,20)-->return 0           (0,20)->return 0 (0,30)->return 0       (0,40)->return 0 (0,50)->return 0
                              
  #Recursive code will be
  
     int knapsack(int n,int W,int[] wt,int val)
     {
          if(n==0 || W==0)
             return 0;
             
           if(wt[n-1]<=W)
           { 
             return Math.max(val[n-1]+knapsack(n-1,W-wt[n-1],wt,val),kanpasack(n-1,W,wt,val);
           }
           else
               return Math.max(n-1,W,wt,val);
      }
Top-Down or Memoization


class Solution 
{ 
    
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        int t[][]=new int[n+1][W+1];
        for(int arr[]:t){
            Arrays.fill(arr,-1);
        }
        return Knapsack(n,W,wt,val,t);
    } 
    public static int Knapsack(int n,int W,int []wt,int []val,int t[][])
    {
        if(n==0 || W==0)
          return 0;
        if(t[n][W]!=-1)
           return t[n][W];
         
           if(wt[n-1]<=W)
           { 
             t[n][W]=Math.max(val[n-1]+Knapsack(n-1,W-wt[n-1],wt,val,t),Knapsack(n-1,W,wt,val,t));
           }
           else
              t[n][W]=Knapsack(n-1,W,wt,val,t);
            return t[n][W];
    }
}


Bottom-Up
---------
dp[n+1][W+1];
   
   for(int i=0;i<=n;i++)
     for(int w=0;w<=W;w++)
       {
          if(i==0 || w==0)
               dp[i][w]=0;
           if(wt[i-1]<=w)
           { 
              dp[i][w]=Math.max(val[i-1]+dp[i-1][w-wt[i-1]],dp[i-1][w])
           }
           e[se
              dp[i][w]=dp[i-1][w];
       }
  Problems based on Knapsack
     1. Subset sum problem
     2. Equil sum partition
     3. Count subset sum
     4. Minimum subset sum differene
     5. Target sum
     6. Count number of subset with given difference
     
