Given weights and values of n items,
put these items in a knapsack of capacity W to get the maximum total value in the knapsack. 
In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent values and weights associated with n items respectively.
Also given an integer W which represents knapsack capacity, 
find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W.
You cannot break an item, either pick the complete item or donâ€™t pick it (0-1 property).



Input:
   Wt -{10,20,30}---------->n=3  n==0 maxprofit=0
   Val-{60,100,120}--------> n=3
   W=50
   
   if(n==0)  // if no weight array or valur array is there there will be no profit
   if(W==0)) //if Capcity of bag is zero then we can't add any items to it and profit will be 0.
   
   so 
     if(n==0 || W==0)
         return 0;
         
         
   let start picking elment from n;
   so there will be two condtion either we will pick or not.
    We can only pick if Weight of current element is less than or equal to W.

    In Bounded Knapsack We can't pick an element twice.
    
   if(Wt[n-1]<=W)
   return Math.max(Val[n-1]+Knapsack(n-1,W-Wt[n-1]),Knapsack(n-1,W);
   else
       returnn Knapsack(n-1,W)
       
       10 20 30
       60 100 120
                  
                   
                                                      (3,50) -->max(120+(2,20),(2,50))--->220 
                                                                    120+100,160
                   (2,20)-->max(100+(1,0),(1,20)                                         (2,50)-->max(100+(1,30),(1,50))
                                100+0,60                                                    100+60,60
    (1,0)-->return 0 since W=0     (1,20)-->max(60+(0,10),(0,20))           (1,30)-->max(60+(0,20),(0,30)        (1,50)-->max(60+(0,40),(0,50)
                                                 60+0,0                              60+0,0                                 60+0,0
                              (0,10)-->return 0  (0,20)-->return 0           (0,20)->return 0 (0,30)->return 0       (0,40)->return 0 (0,50)->return 0
                              
  #Recursive code will be
  
     int knapsack(int n,int W,int[] wt,int val)
     {
          if(n==0 || W==0)
             return 0;
             
           if(wt[n-1]<=W)
           { 
             return Math.max(val[n-1]+knapsack(n-1,W-wt[n-1],wt,val),kanpasack(n-1,W,wt,val);
           }
           else
               return Math.max(n-1,W,wt,val);
      }
Top-Down or Memoization


class Solution 
{ 
    
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        int t[][]=new int[n+1][W+1];
        for(int arr[]:t){
            Arrays.fill(arr,-1);
        }
        return Knapsack(n,W,wt,val,t);
    } 
    public static int Knapsack(int n,int W,int []wt,int []val,int t[][])
    {
        if(n==0 || W==0)
          return 0;
        if(t[n][W]!=-1)
           return t[n][W];
         
           if(wt[n-1]<=W)
           { 
             t[n][W]=Math.max(val[n-1]+Knapsack(n-1,W-wt[n-1],wt,val,t),Knapsack(n-1,W,wt,val,t));
           }
           else
              t[n][W]=Knapsack(n-1,W,wt,val,t);
            return t[n][W];
    }
}


Bottom-Up
---------
dp[n+1][W+1];
   
   for(int i=0;i<=n;i++)
     for(int w=0;w<=W;w++)
       {
          if(i==0 || w==0)
               dp[i][w]=0;
           if(wt[i-1]<=w)
           { 
              dp[i][w]=Math.max(val[i-1]+dp[i-1][w-wt[i-1]],dp[i-1][w])
           }
           e[se
              dp[i][w]=dp[i-1][w];
       }
  Problems based on Knapsack
     1. Subset sum problem
     2. Equal sum partition
     3. Count subset sum
     4. Minimum subset sum differene
     5. Count number of subset with given difference
     6. Target sum
     
     
----------------------------------------------------------
1. Subset Sum problem
     A set of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum.
     Input: set[] = {3, 34, 4, 12, 5, 2}, sum = 9
     Output: True  
     There is a subset (4, 5) with sum 9.
     
     Input: arr[]={2,3,7,8,10},Sum=11
     Output:True 
     (3,8) -->11 
     
     Constraints:
       1 <= N <= 100
       1<= arr[i] <= 100
       1<= sum <= 105
       
       //Recursive soltuion
       
       static Boolean isSubsetSum(int N, int arr[], int sum){
        // code here
           if(sum==0)
              return true;
            if(sum>0 && N==0)
               return false;
            if(arr[N-1]<=sum)
                return isSubsetSum(N-1,arr,sum-arr[N-1]) || isSubsetSum(N-1,arr,sum);
            return isSubsetSum(N-1,arr,sum);
        }   
     //Memoization
       public int ss(int n,int [] arr,int sum)
   {
       if(sum==0)
         return 1;
       if(n<=0)
          return 0;
        if(dp[n][sum]!=-1)
           return dp[n][sum];
        if(arr[n-1]<=sum)
        {
            if(ss(n-1,arr,sum-arr[n-1])!=0 || ss(n-1,arr,sum)!=0)
               dp[n][sum]=1;
            else
              dp[n][sum]=0;
        }
        else
          dp[n][sum]=ss(n-1,arr,sum);
    return dp[n][sum];
   }
      
     //bottom-up
     take a boolean array dp[N+1][sum+1];
     
     if sum=0 -->N=0,1,2,4,5-->True
     if N=0,Sum=0-->True
     if N=0,Sum>0-->False
     
     Suppose N=3 & Sum=7 then Inialization
              0  1 2 3 4 5 6 7
          0   T  F F F F F F F
          1   T 
          2   T
          3   T
       static Boolean isSubsetSum(int N, int arr[], int sum){
       
           Boolean dp[][]=new Boolean[N+1][sum+1];
           for(int i=0;i<=sum;i++)
           {
               dp[0][i]=false;
           }
           for(int i=0;i<=N;i++)
           {
               dp[i][0]=true;
           }
           
           for(int i=1;i<=N;i++)
           {
               for(int j=1;j<=sum;j++)
               {
                   if(arr[i-1]<=j)
                   {
                       dp[i][j]=dp[i-1][j-arr[i-1]] || dp[i-1][j];
                   }
                   else
                     dp[i][j]=dp[i-1][j];
                   
               }
           }
           return dp[N][sum];
    }
    
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
2. Equal Sum Partition

Partition problem is to determine whether a given set can be partitioned into two subsets such that the sum of elements in both subsets is the same. 

INPUT:{1,5,11,5}
OUTPUT:True/False

Here {1,5,5} & {11}
    sum=11   & sum=11 --->True
Basicly it's variation of Subset sum problem.
Let's understand
Here total sum of all element in a array is 1+5+11+5=22;
so if we do sum=sum/2 then we only have to find the Subset sum in array for sum/2.

So our new input will be like SS(int n,arr,sum/2)

 static int equalPartition(int N, int arr[])
    {
        // code here
        int sum=0;
        for(int i=0;i<N;i++)
        {
            sum+=arr[i];
        }
        if(sum%2==0){

        if(isSubsetSum(N,arr,sum/2))
            return 1;}
        
       return 0;
    }
    
   -----------------------------------------------------------------------------------
   -----------------------------------------------------------------------------------
   3.Count of subsets with sum equal to X
   Given an array arr[] of length N and an integer X, the task is to find the number of subsets with a sum equal to X.
   
   INPUT: arr=[2,3,4,6,8,10}
          sum=10;
  Output: 3 {2,8}
           {4,6}
           {10}
            0 1 2 3 4 5 6 7 8 9 10
          0 1 0 0 0 0 0 0 0 0 0 0
          1 1
          2 1
          3 1
          4 1
          5 1
          6 1
           
           
          if(arr[i-1]<=j)
          { 
            dp[i][j]=dp[i-1][j-arr[i-1]]+dp[i-1][j];
          }
          else
            dp[i][j]=dp[i-1][j];
  -------------------------------------------------------------------
  -------------------------------------------------------------------
  4.Minimum Subset sum difference
  
  Given a set of integers, the task is to divide it into two sets S1 and S2 such that the absolute difference between their sums is minimum. 
  
  Input : arr=[1,6,11,5]
  o/p-1
  
  arr={1,5,8,9,0,10}
  
  lets P1 and P2 is two partition of array and S1 & S2 is sum of P1 and P2 respectivly.
  
  abs(S2-S1) should be minimum
  |S2 -S1|=min or |S1-S2|=min
  
  let's take empty subset ={} as P1 then S1=0  
  and whole array as P2 the S2=Sum(arr)
  
  then abs(S2-S1) will be maximum.
  So for minimum abs difference S1 & S2 can be lie b/w 0 to Sum(arr)--Range(0,23)
  for example: 1 6 11 5
  sum=23
  so S1 & S2 will be lie between 0 & 23;
  
  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
  T T F F F T T T F F F  T  T   F F  F  T  T  T  F  F  F  T  T
  
  these the posible sum for the range 0-23 so let's check how many sum is possible for the given Array.
  
  So two Subset in above example will be
  S1 & S2=Range-S1
  
  S2-S1=Min or S1-S2=Min
  
  Range-S1-S1=min
  Range-2S1=Min
  Here we Know range i.e 23 
  We only have to find S1.
  
  Here S2-S1 should be Minimum so S1 will not go beyond Range/2.
  Means 
    we Only have to minimize Range-2S1 till Range/2;
    
	public int minDifference(int arr[], int n) 
	{ 
	    int range=0;
	    for(int i=0;i<n;i++)
	       range+=arr[i];
	       
	  boolean dp[][]=new boolean[n+1][range+1];
	   for(int i=0;i<=n;i++)
	     dp[i][0]=true;
	   for(int i=1;i<=n;i++)
	     for(int j=1;j<=range;j++)
	     {
	         if(arr[i-1]<=j)
	         {
	             dp[i][j]=dp[i-1][j-arr[i-1]] || dp[i-1][j];
	         }
	         else
	            dp[i][j]=dp[i-1][j];
	     }
	     int min=range;
	     for(int i=0;i<=range/2;i++)
	     {
	         if(dp[n][i])
	         {
	             min=Math.min(range-2*i,min);
	         }
	     }
	     return min;
	}
-------------------------------------------------------------
-------------------------------------------------------------
5. Count number of subset with given difference

Input:[1,1,2,3]
     diff=1;
Output:{1,2},{1,2}{2,3}-3

Let sum of subset 1 be s1 and subset 2 with s2
s1 - s2 = diff (given)
s1 + s2=sum of array (logical)
Therefore adding both eq we get :
2s1= diff + sum of array
s1= (diff + sum of array)/2;
Problem reduces to find no of subsets with given sum
Problem 3 :


     
  
  
  
  
  
  
  
            
