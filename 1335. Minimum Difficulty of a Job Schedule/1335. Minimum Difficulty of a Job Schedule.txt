1335. Minimum Difficulty of a Job Schedule

You want to schedule a list of jobs in d days. 
j1 j2 j3 .......jn in d days 
jd1 jd2 jd3 ....jdn (difficulty of each jobs)

Jobs are dependent (i.e To work on the ith job,
 you have to finish all the jobs j where 0 <= j < i).

So,To finish job3 u need to finish j1,j2 first.

You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. 
The difficulty of a day is the maximum difficulty of a job done on that day.

INPUT:
   jobDifficulty Array: [6,5,4,3,2,1],
 And Days  d:2

Basiclly we have to divide jobDifficulty array into #d subarray
And find min of sum of largest integers in each subarrays.

example 1
    6 5 4 3 2 1  d=2
    6 5 4  and 3 2 1
    Max(6,5,4)+Max(3,2,1)==>6+3=9 min=9

    6  and 5 4 3 2 1
    6+5=11 ==>min=9

    6 5 4 3 and 2 1
    6+2=8===>min=8

    6 5 4 3 2 and 1
    6+1=>7==>min=7

  output is 7;

Example 2 
[6,5,4,3,2] & d=3

d1          (6)            d2     (5)               d3
6----------------------->|  5   |----               4
65-----------------|     |  54  |    |              43
654 ------|        |(6)  | 543  |    |----------->  432--->(4)=>(6+5+4)=>14
6543       |        |    | 5432 |                   
65432        |        |     
               |      |->|  4 ----------------->(4) 3  -->(3)==>6+4+3=13
               |         | 43                       32
               |         | 432
               | (6)      
               |-------->|   3---------------> (3)  2-->(2)==>6+3+2=11-->MIN
                         |   32
   
                              2           


maxtill=new int[n];
        int max=Integer.MIN_VALUE;
        for(int i=n-1;i>=0;i--)
        {    max=Math.max(max,jobDifficulty[i]);
            maxtill[i]=max;
        }
diff     6 5 4 3 2       6 7 8 5 3
maxtill  6 5 4 3 2       8 8 8 5 3
//Memoization
int sol(int i,int day)==>(0,1)
{
     if(day==d)
            return maxtill[i];
        
        if(dp[i][day]==-1)
        {
            int answer=Integer.MAX_VALUE;
            int maxSofar=0;
            for(int j=i;j<(n-(d-day));j++)
            {
                maxSofar=Math.max(maxSofar,diff[j]);
                answer=Math.min(answer,maxSofar+sol(j+1,day+1));
            }
            dp[i][day]=answer;
        }
        return dp[i][day];
}
