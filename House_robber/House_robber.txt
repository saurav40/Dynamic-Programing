LEETCODE PROBLEM NO-198

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, 
the only constraint stopping you from robbing each of them is that adjacent houses have security systems 
connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 400

-----------------------------------------------------------------------------------*---------------------------------------------

Solution:
    Base Case:  If there is only one house then return nums[0];
    
    If there is only two houses then the robber can rob the house who has maximum amount
    that is Math.max(nums[0],nums[1]);
    
    if houses are more than two then we will maintain an dp array of lenth n:
    which return maxminum amount a robber can rob at dp[n-1];
    
    for example nums=[2,7,9,3,1] 
    n=5
    int dp[]=new int[n];{0,0,0,0,0}
    
    dp[0] =nums[0] : maximum amount at house 0 a robber can rob
    dp[1]=Math.max(nums[0],nums[1]) : maxmimum amount at house 1 a robber can rob.
    
    for i=2;
    dp[2]=Math.max(nums[2]+dp[i-2],dp[i-1])
    
    since we can't rob two consecutive houses then we can rob max amount.
    if we add current house amount i.e nums[i]+maximum amount robbed at i-2 i.e dp[i-2].
            nums[i]+dp[i-2]
     so the maximum amount at ith house is
        i=2 to n;
        dp[i]=Max(dp[i-1],dp[i-2]+nums[i])
    
    return dp[n-1];
    
    Time Complexity -O(n) & Space complexity-S(n)
    
  We can further reduce space complexity using two variables:
     Prev2 & Prev1
     
     Prev2=nums[0];
     Prev1=Math.max(nums[0],nums[1]);
     i=2; to n;
     int curr=Max(prev1,prev2+nums[i]);
     Prev2=prev1;
     Prev1=curr;
     
     return Prev1;
     
     O(n) 
     
     
