You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

-------------------------Solution-----------------

1)State-Machine
     class Solution {
    public int maxProfit(int k, int[] prices) {
        int n=prices.length;
        //Case 1
        if(n<=1 || k==0)
            return 0;
        //Case 2 if(n<=2k)
        if(2*k>n){
        int maxP=0;
         for(int i=1;i<n;i++)
         {
             if(prices[i]>prices[i-1])
                 maxP+=(prices[i]-prices[i-1]);
         }
         return maxP;
        }  
        //Case 3- State-Machine or dp 
        int dp[]=new int[2*k];
        dp[0]=-prices[0];
        for(int i=1;i<2*k;i++)
        {
            if(i%2==0)
                dp[i]=Integer.MIN_VALUE;
            else
                dp[i]=0;
        }
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<2*k;j++) //2*k states for each elemnet
            {
                if(j==0)//Buy or skip
                    dp[j]=Math.max(dp[j],-prices[i]);
                else if(j%2==0)//Buy
                    dp[j]=Math.max(dp[j],dp[j-1]-prices[i]);
                else
                    dp[j]=Math.max(dp[j],dp[j-1]+prices[i]);
            }
        }
        return dp[2*k-1];
    }
}
Time Complextity -->O(n*2k)==>O(n*k);
Space   --->O(2k)-->O(k)

2)DP Memoization

class Solution {
    int memo[][][];
    public int maxProfit(int k, int[] prices) {
        memo=new int[2][k+1][prices.length];
        for(int i=0;i<2;i++)
            for(int j=0;j<k+1;j++)
                for(int l=0;l<prices.length;l++)
                {
                    memo[i][j][l]=-1;
                }
                        
        int result=solve(prices,0,k,0);
        return result;
    }
  private int solve(int [] P,int pos,int tx,int bought)
    {
        if(pos>=P.length || tx==0)
            return 0;
        if(memo[bought][tx][pos]!=-1)
            return memo[bought][tx][pos];
        
        //Skip
        int result=solve(P,pos+1,tx,bought);
        
        //Buy
        if(bought==0)
            result=Math.max(result,solve(P,pos+1,tx,1)-P[pos]);
        else
            result=Math.max(result,solve(P,pos+1,tx-1,0)+P[pos]);//sell
        
        return memo[bought][tx][pos]=result;
    }
}
------------------------------------------------*-------------------------------------------------
