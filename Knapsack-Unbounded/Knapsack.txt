                                       Knapsack
                                    |       |        | 
                                  |         |            |
                             Fractional   Knapsack(0/1)   Unbounded Knapsack  
                             Knapsack
         
    Unbounded Knapsack-Repetition of elment is allowed
    
    The Only difference is we can include an element multiple time in unbounded.
    And if we exclude an element we can't repeat that element:
    
    for example
    let these are the element of knapsack
    
    a1 a2 a3 a4 a5
                if we exclude a5 then we have made a decision that we are done we a5.
                But if We include it we may or may not include this elment again.
   //Recursive 
   
   if(n==0 || W==0)
       return 0;
   int choice1=-1;
   if(wt[n-1]<=W)
   {
       choice1=Math.max(val[n-1]+Knapsack(n,W-Wt[n-1],val,wt),Knapsack(n-1,W,val,wt);
   }
   return Math.max(choice1,Knapsack(n-1,W,val,wt));
   
   //Memoization
   
   t[n+1][W+1]:
           -1 -1 -1
           -1 -1 -1 
           -1 -1 -1
      
   if(n==0 || W==0)
       return 0;
   if(t[n][W]!=-1)
      return t[n][W];
  
   if(wt[n-1]<=W)
   {
       t[n][W]=Math.max(val[n-1]+Knapsack(n,W-Wt[n-1],val,wt),Knapsack(n-1,W,val,wt);
   }
   return t[n][W]=Math.max(t[n][W],Knapsack(n-1,W,val,wt));
  
  //Bottom-Up
  static int knapSack(int N, int W, int val[], int wt[])
    {
        int t[][]=new int[N+1][W+1];
        
        for(int i=1;i<=N;i++)
          for(int j=1;j<=W;j++)
          {
              if(wt[i-1]<=j)
              {
                  t[i][j]=Math.max(val[i-1]+t[i][j-wt[i-1]],t[i-1][j]);
              }
              else
              {
                  t[i][j]=t[i-1][j];
              }
          }
          return t[N][W];
    }
           
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

Related problems
----------------
1.Rod cutting
2.Coin Change
3.Coin Change II
4.Maximum Ribbon cut
----------------------------
1.Rod Cutting

Given a rod of length n inches and an array of prices that includes prices of all pieces of size smaller than n. 
Determine the maximum value obtainable by cutting up the rod and selling the pieces. 

Input:length 1  2  3  4   5   6   7  8 
      Price={1, 5, 8, 9, 10, 17, 17, 20} 
      maX_Length=size(arr)=8
      
      if max_length=0 return 0;
      if(n==0) return 0;
      //-----------Memoization-------------------//
      int RodCutting(int[] price,int[] length,int MaxLength,int n)
      {
          if(n==0 || MaxLength)
             return 0;
          if(t[n][MaxLength]!=-1)
             return t[n][MaxLength];
          if(length[n-1]<=MaxLength)
          {
               t[n][MaxLength]=Math.max(price[n-1]+RodCutting(price,length,MaxLength-length[n-1],n),RodCutting(price,length,MaxLength,n-1);
           }
           return Math.max(t[n][MaxLength],RodCutting(price,length,MaxLength,n-1));
      }
   //-----------------Bottom-up----------------------//
   public int cutRod(int price[], int n) {
        int []len=new int[n];
        for(int i=0;i<n;i++)
             len[i]=i+1;
        int dp[][]=new int[n+1][n+1];
        for(int i=1;i<=n;i++)
          for(int j=1;j<=n;j++)
          {
              if(len[i-1]<=j)
              {
                  dp[i][j]=Math.max(price[i-1]+dp[i][j-len[i-1]],dp[i-1][j]);
              }
              else
                dp[i][j]=dp[i-1][j];
          }
        return dp[n][n];
    }
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
 2.Coin Change(LeetCode Coin Change II)
 
 Given a value N, if we want to make change for N cents, and we have infinite supply of each of S = { S1, S2, .. , Sm} valued coins,
 how many ways can we make the change? The order of coins doesnâ€™t matter.
For example, for N = 4 and S = {1,2,3}, there are four solutions: {1,1,1,1},{1,1,2},{2,2},{1,3}. So output should be 4. For N = 10 and S = {2, 5, 3, 6}, there are five solutions: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}. So the output should be 5.


Input: given N=4 -->MaxVAl
       Coins=[1,2,3]
       here we are including 1 ->4 times to Get Val=4 
       So it's clear that it's unbounded knapsack problem.But here we will have to count how many solution exist so basicly it subset count problem with repeated elements.
       Here is recurisve solution
       
       if N=0 -->{} return 1;
       if N<0 retuen 0;
       if(n<=0 && N>=1) if there is no coin then we can't find any soltion for value greater than or equal to 1.
          return 0;
       CoinChange(int []coins,int N,int n)
       {
           if(N==0)
              return 1;
           if(N<0 || (n<=0 && N>=1)) 
              return 0;
           if(coins[n-1]<=N)
           {           //totl_count=Included+Excluded
              return CoinChange(coins,N-coins[n-1],n)+CoinChange(coins,N,n-1);
           }
           return CoinChange(coins,N,n-1);
        }
       
      //-----------------Memoization-----------------//
       private int countSS(int[] coins,int amount,int n)
       {
       if(amount==0)
            return 1;
        if(amount<0 || (n<=0 && amount>=1))
            return 0;
         if(t[n][amount]!=-1)
              return t[n][amount];
        if(coins[n-1]<=amount)
        {
            return t[n][amount]=countSS(coins,amount-coins[n-1],n)+countSS(coins,amount,n-1);
        }
        return t[n][amount]=countSS(coins,amount,n-1);  
      }
     }
  //-----------------------------Bottom-Up-----------------------------------//
  class Solution {
    public int change(int amount, int[] coins) {
      int n=coins.length;
      int dp[][]=new int[n+1][amount+1];
     // amount=0 dp[i][0]=1
        for(int i=0;i<=n;i++)
            dp[i][0]=1;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=amount;j++)
            {
                if(coins[i-1]<=j)
                {
                    dp[i][j]=dp[i][j-coins[i-1]]+dp[i-1][j];
                }
                else
                    dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][amount];
    }
   }
---------------------------------------------------------------------------------------------------------------------------
3. Coin Change II(LeetCode Coin Change)

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n=coins.length;
        int dp[][]=new int[n+1][amount+1];
        
        for(int i=0;i<=amount;i++)
        {
            dp[0][i]=Integer.MAX_VALUE-1;
        }
        for(int i=0;i<=n;i++)
        {
            dp[i][0]=0;
        }
        for(int j=1;j<=amount;j++)
        {
            if(j%coins[0]==0)
            {
                dp[1][j]=j/coins[0];
            }
            else
            {
                dp[1][j]=Integer.MAX_VALUE-1;
            }
        }
        
        for(int i=2;i<=n;i++)
            for(int j=1;j<=amount;j++)
            {
                if(coins[i-1]<=j)
                {
                    dp[i][j]=Math.min(1+dp[i][j-coins[i-1]],dp[i-1][j]);
                }
                else
                {
                    dp[i][j]=dp[i-1][j];
                }
                    
            }
        if(dp[n][amount]==Integer.MAX_VALUE-1)
            return -1;
        return dp[n][amount];
    }
}

       
       
