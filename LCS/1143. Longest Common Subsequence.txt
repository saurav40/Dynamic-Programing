Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing 
the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

//Recusrive
private int LCS(String x,String y,int n,int m)
    {
        if(n == 0 || m == 0){
            return 0;
        }
        
        
        if(x.charAt(n - 1) == y.charAt(m - 1)){
            return 1 + LCS(x,y,n - 1,m - 1,dp);
        }
        else{
            return  Math.max(LCS(x,y,n,m - 1),
                           LCS(x,y,n - 1,m));
        }  
    }






//memoization

private int LCS(String x,String y,int n,int m,int [][]dp)
    {
        if(n == 0 || m == 0){
            return 0;
        }
        
        if(dp[n][m] != -1){
            return dp[n][m];
        }
        
        if(x.charAt(n - 1) == y.charAt(m - 1)){
            return dp[n][m] = 1 + LCS(x,y,n - 1,m - 1,dp);
        }
        else{
            return dp[n][m] = Math.max(LCS(x,y,n,m - 1,dp),
                           LCS(x,y,n - 1,m,dp));
        }  
    }
    
    //Bottom-up
    
    class Solution {
    //private int[][] dp=new int[1001][1001];
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int dp[][]=new int[n+1][m+1];
        for(int i=1;i<=n;i++)
         for(int j=1;j<=m;j++)
         {
             if(text1.charAt(i - 1)==text2.charAt(j - 1))
             {
                 dp[i][j]=1+dp[i-1][j-1];
             }
             else
             {
                 dp[i][j]=Math.max(dp[i][j-1],dp[i-1][j]);
             }
          }
        return dp[n][m];
    }
   
}
